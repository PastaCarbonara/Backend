"""Update user

Revision ID: a16891dc5b56
Revises: 83e5a1f16e40
Create Date: 2023-04-19 11:05:26.479699

"""
import uuid
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a16891dc5b56'
down_revision = '83e5a1f16e40'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('account_auth',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_unique_constraint(None, 'user', ['client_token'])
    
    if op.get_context().dialect.name == "sqlite":
        op.add_column('user', sa.Column('display_name', sa.String(length=50), nullable=False))
        op.add_column('user', sa.Column('is_admin', sa.Boolean(), nullable=False))
        op.add_column('user', sa.Column('client_token', sa.Uuid(), nullable=False))

    else:
        op.add_column('user', sa.Column('display_name', sa.String(length=50), nullable=True))
        op.add_column('user', sa.Column('is_admin', sa.Boolean(), nullable=True))
        op.add_column('user', sa.Column('client_token', sa.Uuid(), nullable=True))
        op.execute('UPDATE "user" SET client_token = gen_random_uuid()')
        op.alter_column('user', 'client_token', nullable=False)

        op.execute("""
            INSERT INTO account_auth (username, user_id, password, created_at, updated_at)
            SELECT user_profile.username, user_profile.user_id, user_profile.password, user_profile.created_at, user_profile.updated_at
            FROM user_profile""")
        op.execute("""
            UPDATE "user" 
            SET is_admin = user_profile.is_admin, display_name = user_profile.username 
            FROM user_profile WHERE "user".id = user_profile.user_id;""")
        op.alter_column('user', 'display_name', nullable=False)
        op.alter_column('user', 'is_admin', nullable=False)
        op.drop_table('user_profile')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_profile',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='user_profile_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', name='user_profile_pkey')
    )
    op.execute("""
        INSERT INTO user_profile (username, user_id, password, created_at, updated_at, is_admin)
        SELECT account_auth.username, account_auth.user_id, account_auth.password, account_auth.created_at, account_auth.updated_at, false
        FROM account_auth""")
    op.execute("""
        UPDATE user_profile 
        SET is_admin = "user".is_admin
        FROM "user" WHERE user_profile.user_id = "user".id;""")
    op.drop_column('user', 'client_token')
    op.drop_column('user', 'is_admin')
    op.drop_column('user', 'display_name')
    op.drop_table('account_auth')
    # ### end Alembic commands ###
