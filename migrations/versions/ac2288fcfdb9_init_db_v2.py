"""init db v2

Revision ID: ac2288fcfdb9
Revises: 
Create Date: 2023-04-06 13:36:18.140899

"""
from datetime import datetime
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'ac2288fcfdb9'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('file',
    sa.Column('filename', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('filename')
    )
    op.create_table('group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), default=datetime.utcnow, nullable=False),
    sa.Column('updated_at', sa.DateTime(), default=datetime.utcnow, nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ingredient',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tag',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), default=datetime.utcnow, nullable=False),
    sa.Column('updated_at', sa.DateTime(), default=datetime.utcnow, nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('group_member',
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('group_id', 'user_id')
    )
    op.create_table('recipe',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('instructions', sa.JSON(), nullable=False),
    sa.Column('preparing_time', sa.Integer(), nullable=True),
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('creator_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), default=datetime.utcnow, nullable=False),
    sa.Column('updated_at', sa.DateTime(), default=datetime.utcnow, nullable=True),
    sa.ForeignKeyConstraint(['creator_id'], ['user.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['filename'], ['file.filename'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('swipe_session',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('session_date', sa.DateTime(), default=datetime.utcnow, nullable=False),
    sa.Column('status', sa.Enum('Gestopt', 'Voltooid', 'Is bezig', 'Gepauzeerd', 'Staat klaar', name='swipesessionenum'), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), default=datetime.utcnow, nullable=False),
    sa.Column('updated_at', sa.DateTime(), default=datetime.utcnow, nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_profile',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), default=datetime.utcnow, nullable=False),
    sa.Column('updated_at', sa.DateTime(), default=datetime.utcnow, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('recipe_ingredient',
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.Column('ingredient_id', sa.Integer(), nullable=False),
    sa.Column('unit', sa.String(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['ingredient_id'], ['ingredient.id'], ),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('recipe_id', 'ingredient_id')
    )
    op.create_table('recipe_judgement',
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('like', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), default=datetime.utcnow, nullable=False),
    sa.Column('updated_at', sa.DateTime(), default=datetime.utcnow, nullable=True),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('recipe_id', 'user_id')
    )
    op.create_table('recipe_tag',
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('recipe_id', 'tag_id')
    )
    op.create_table('swipe',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('like', sa.Boolean(), nullable=False),
    sa.Column('swipe_session_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], ),
    sa.ForeignKeyConstraint(['swipe_session_id'], ['swipe_session.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('swipe')
    op.drop_table('recipe_tag')
    op.drop_table('recipe_judgement')
    op.drop_table('recipe_ingredient')
    op.drop_table('user_profile')
    op.drop_table('swipe_session')
    op.drop_table('recipe')
    op.drop_table('group_member')
    op.drop_table('user')
    op.drop_table('tag')
    op.drop_table('ingredient')
    op.drop_table('group')
    op.drop_table('file')
    
    # if op.get_context().dialect.name == "postgresql":
    op.execute("DROP TYPE IF EXISTS swipesessionenum")
    # ### end Alembic commands ###
